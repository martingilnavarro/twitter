// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// The generator block runs every time you run `prisma generate`.
// The prisma-client-js is the default generator that builds ts types based on the db models.
// You can find more about generators here: https://www.prisma.io/docs/concepts/components/prisma-schema/generators
generator client {
  provider = "prisma-client-js"
}

// The datasource block specifies the url to your DBMS.
// You only need to set the DATABASE_URL in your environment file.
// You can find more about datasources here: https://www.prisma.io/docs/concepts/components/prisma-schema/data-sources
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  username String  @unique // Unique constraint
  name     String? @db.VarChar(35) // Limit display name to 35 characters
  email    String  @unique // Unique constraint
  password String
  private  Boolean @default(false) 
  image    String?  

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  posts     Post[]
  follows   Follow[] @relation(name: "follows")
  followers Follow[] @relation(name: "followers")
  reactions Reaction[] @relation(name: "reactionsUser")
}

model Follow {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  followerId String @db.Uuid()
  followedId String @db.Uuid()

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  follower User @relation(name: "follows", fields: [followerId], references: [id], onDelete: Cascade) // One to many
  followed User @relation(name: "followers", fields: [followedId], references: [id], onDelete: Cascade) // One to many

  @@unique([followerId, followedId])
}

model Reaction {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  userId String @db.Uuid()
  postId String @db.Uuid()

  like     Boolean @default(true) 
  retweet  Boolean @default(false) 

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  user User @relation(name: "reactionsUser", fields: [userId], references: [id], onDelete: Cascade) // One to many
  post Post @relation(name: "reactionsPost", fields: [postId], references: [id], onDelete: Cascade) // One to many

  @@unique([userId, postId])
}

model Post {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  authorId        String   @db.Uuid // Foreign Key
  content         String   @db.VarChar(240) // Limit the content to 240 characters
  images          String[]

  comment Boolean @default(false) 
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  postCommentedId String? @db.Uuid
  postCommented   Post? @relation("PostComments", fields: [postCommentedId], references: [id])
  comments        Post[] @relation("PostComments")

  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade) // One to many
  reactions Reaction[] @relation(name: "reactionsPost")
  
  
}


